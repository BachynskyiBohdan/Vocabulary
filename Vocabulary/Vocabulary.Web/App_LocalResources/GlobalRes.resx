<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AddAllToVocabulary" xml:space="preserve">
    <value>Add all To Vocabulary</value>
  </data>
  <data name="AddNew" xml:space="preserve">
    <value>Add new</value>
  </data>
  <data name="AddPhraseAsLearned" xml:space="preserve">
    <value>Add as learned</value>
  </data>
  <data name="AddPhraseAsLearnedTitle" xml:space="preserve">
    <value>Add phrase to vocabulary as learned</value>
  </data>
  <data name="AddPhraseAsUnknown" xml:space="preserve">
    <value>Add as unknown</value>
  </data>
  <data name="AddPhraseAsUnknownTitle" xml:space="preserve">
    <value>Add phrase to vocabulary as unknown</value>
  </data>
  <data name="AddPhraseToVocabulary" xml:space="preserve">
    <value>Add phrase to vocabulary</value>
  </data>
  <data name="AdminGlossariesTitle" xml:space="preserve">
    <value>Glossaries main page</value>
  </data>
  <data name="All" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="AlreadyAddedToVocabulary" xml:space="preserve">
    <value>Already added to vocabulary</value>
  </data>
  <data name="Audio" xml:space="preserve">
    <value>Audio</value>
  </data>
  <data name="AutoplayTitle" xml:space="preserve">
    <value>enable/disable autoplay</value>
  </data>
  <data name="ChangeVidgetSize" xml:space="preserve">
    <value>Change size of widget(with or without examples)</value>
  </data>
  <data name="ChooseTranslationLanguage" xml:space="preserve">
    <value>Choose translation language:</value>
  </data>
  <data name="EmailAlreadyExist" xml:space="preserve">
    <value>Email is already exist</value>
  </data>
  <data name="EmailParameterError" xml:space="preserve">
    <value>Email should contain only latin letters and numbers.</value>
  </data>
  <data name="Examples" xml:space="preserve">
    <value>Examples</value>
  </data>
  <data name="ExistUsernameError" xml:space="preserve">
    <value>User with such username isn't exist</value>
  </data>
  <data name="Glossaries" xml:space="preserve">
    <value>Glossaries</value>
  </data>
  <data name="Glossary" xml:space="preserve">
    <value>Glossary - </value>
  </data>
  <data name="LearningState" xml:space="preserve">
    <value>Learning state</value>
  </data>
  <data name="Loading" xml:space="preserve">
    <value>Loading...</value>
  </data>
  <data name="Logo" xml:space="preserve">
    <value>Logo</value>
  </data>
  <data name="OpenGlossary" xml:space="preserve">
    <value>Open glossary</value>
  </data>
  <data name="OutOf" xml:space="preserve">
    <value>out of</value>
  </data>
  <data name="PasswordParameterError" xml:space="preserve">
    <value>Pasword should contain only latin letters and numbers. Minimum 6, maximum 16 symbols.</value>
  </data>
  <data name="Phrase" xml:space="preserve">
    <value>Phrase</value>
  </data>
  <data name="Phrases" xml:space="preserve">
    <value>Phrases</value>
  </data>
  <data name="PhrasesTitle" xml:space="preserve">
    <value>Phrases main page</value>
  </data>
  <data name="PlayAudio" xml:space="preserve">
    <value>Play audio</value>
  </data>
  <data name="Registration" xml:space="preserve">
    <value>Registration</value>
  </data>
  <data name="RemovePhraseFromVocabulary" xml:space="preserve">
    <value>Remove phrase from vocabulary</value>
  </data>
  <data name="RemovePhrasesFromVocabulary" xml:space="preserve">
    <value>Remove selected phrases from vocabulary</value>
  </data>
  <data name="SearchPlaceholder" xml:space="preserve">
    <value>Search query...</value>
  </data>
  <data name="SelectedGlossaryLanguage" xml:space="preserve">
    <value>Selected glossaries language</value>
  </data>
  <data name="SelectedTranslationLanguage" xml:space="preserve">
    <value>Selected phrases translations language</value>
  </data>
  <data name="SelectGlossaryEnLanguage" xml:space="preserve">
    <value>Select glossaries in english language</value>
  </data>
  <data name="SelectGlossaryRuLanguage" xml:space="preserve">
    <value>Select glossaries in russian language</value>
  </data>
  <data name="SelectGlossaryUkLanguage" xml:space="preserve">
    <value>Select glossaries in ukrainian language</value>
  </data>
  <data name="SelectTranslationEnLanguage" xml:space="preserve">
    <value>Select phrases translations in english language</value>
  </data>
  <data name="SelectTranslationRuLanguage" xml:space="preserve">
    <value>Select phrases translations in russian language</value>
  </data>
  <data name="SelectTranslationUkLanguage" xml:space="preserve">
    <value>Select phrases translations in ukrainian language</value>
  </data>
  <data name="Sentence" xml:space="preserve">
    <value>Sentences</value>
  </data>
  <data name="SignIn" xml:space="preserve">
    <value>Sign in</value>
  </data>
  <data name="SignInAs" xml:space="preserve">
    <value>Hello,</value>
  </data>
  <data name="SignOut" xml:space="preserve">
    <value>Sign out</value>
  </data>
  <data name="SomethingWrong" xml:space="preserve">
    <value>Something is going wrong!</value>
  </data>
  <data name="Translation" xml:space="preserve">
    <value>Translation</value>
  </data>
  <data name="UserGlossariesTitle" xml:space="preserve">
    <value>Phrases sets</value>
  </data>
  <data name="UsernameAlreadyExist" xml:space="preserve">
    <value>Username is already exist</value>
  </data>
  <data name="UsernameOrPasswordIncorrent" xml:space="preserve">
    <value>Username or password is incorrect</value>
  </data>
  <data name="UsernameParameterError" xml:space="preserve">
    <value>Username should contain only latin letters and numbers and begin with a letter. Minimum 5, maximum 30 symbols.</value>
  </data>
  <data name="Vocabulary" xml:space="preserve">
    <value>Vocabulary</value>
  </data>
  <data name="VocabularyTitle" xml:space="preserve">
    <value>User Vocabulary </value>
  </data>
  <data name="Word" xml:space="preserve">
    <value>Words</value>
  </data>
  <data name="WordRank" xml:space="preserve">
    <value>Word rank</value>
  </data>
  <data name="Words" xml:space="preserve">
    <value>words</value>
  </data>
  <data name="Begin" xml:space="preserve">
    <value>Begin</value>
  </data>
  <data name="End" xml:space="preserve">
    <value>End</value>
  </data>
  <data name="NextPage" xml:space="preserve">
    <value>Next page</value>
  </data>
  <data name="PrevPage" xml:space="preserve">
    <value>Previous page</value>
  </data>
  <data name="Email" xml:space="preserve">
    <value>Email</value>
  </data>
  <data name="Enter" xml:space="preserve">
    <value>Sign in</value>
  </data>
  <data name="Password" xml:space="preserve">
    <value>Password</value>
  </data>
  <data name="QuickRegistration" xml:space="preserve">
    <value>Quick registration</value>
  </data>
  <data name="Register" xml:space="preserve">
    <value>Register</value>
  </data>
  <data name="Username" xml:space="preserve">
    <value>Username</value>
  </data>
  <data name="UsernameOrEmail" xml:space="preserve">
    <value>Username or email</value>
  </data>
</root>